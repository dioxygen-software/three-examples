{"version":3,"file":"dioxygen-three-examples.js","sources":["../src/materials/MeshNormalDepthMaterial.js","../src/materials/MeshRGBADepthMaterial.js","../src/materials/MeshViewPositionMaterial.js","../src/materials/MeshWorldNormalMaterial.js","../src/materials/MeshWorldPositionMaterial.js"],"sourcesContent":["import {\n    ShaderLib,\n    ShaderMaterial,\n    TangentSpaceNormalMap,\n    UniformsUtils,\n    Vector2\n} from 'three';\n\n\n/**\n     * @author Maxime Quiblier / http://github.com/maximeq\n     *\n     * This material will save view space normals in pixels inside rbg channels as well as Depth inside the alpha channel \n     * Use same parameters as for MeshNormalMaterial.\n     * \n     *\n     */\nclass MeshNormalDepthMaterial extends ShaderMaterial {\n\n    constructor(parameters) {\n\n        parameters = parameters || {};\n\n        parameters.uniforms = UniformsUtils.merge([\n            ShaderLib.normal.uniforms,\n            { linearize_depth: { value: parameters.linearize_depth ?? true } }\n        ]);\n        parameters.vertexShader = 'varying mat4 vProjectionMatrix;' + '\\n'\n            + ShaderLib.normal.vertexShader.replace(\n                '#include <uv_vertex>',\n                'vProjectionMatrix = projectionMatrix;' + '\\n'\n                + '#include <uv_vertex>'\n            );\n        parameters.fragmentShader =\n            'varying mat4 vProjectionMatrix;' + '\\n' +\n            'uniform bool linearize_depth;' + '\\n' +\n            ShaderLib.normal.fragmentShader.replace(\n                'gl_FragColor = vec4( packNormalToRGB( normal ), opacity );',\n                'float zN = 2.0*gl_FragCoord.z - 1.0;' + '\\n'\n                + 'float p23 = vProjectionMatrix[3][2];' + '\\n'\n                + 'float k = (vProjectionMatrix[2][2] - 1.0f)/(vProjectionMatrix[2][2] + 1.0f);' + '\\n'\n                + 'float inK = vProjectionMatrix[2][2] / p23;' + '\\n'\n                + 'float zFar =  p23/(1.0f + p23*inK);' + '\\n'\n                + 'float zNear =  1.0f/(inK - 1.0/p23);' + '\\n'\n                + 'float linearizedDepth =  2.0 * zNear * zFar / (zFar  + zNear - zN * (zFar - zNear));' + '\\n'\n                + 'float depth_e = linearize_depth ? linearizedDepth : zN;' + '\\n'\n                + 'gl_FragColor = vec4( packNormalToRGB( normal ), depth_e );'\n            );\n\n        super(parameters);\n\n        this.bumpMap = null;\n        this.bumpScale = 1;\n\n        this.normalMap = null;\n        this.normalMapType = TangentSpaceNormalMap;\n        this.normalScale = new Vector2(1, 1);\n\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n\n        this.fog = false;\n        this.lights = false;\n\n        this.skinning = false;\n        this.morphTargets = false;\n        this.morphNormals = false;\n\n        this.isMeshNormalMaterial = true;\n        this.isMeshNormalDepthMaterial = true;\n\n    }\n}\n\nexport { MeshNormalDepthMaterial };\n\n","import { MeshDepthMaterial, RGBADepthPacking } from 'three'\n\n/**\n * @author Maxime Quiblier / http://github.com/maximeq\n * Material packing depth as rgba values.\n * It is basically just MeshDepthMaterial with depthPacking at THREE.RGBADepthPacking\n */\nclass MeshRGBADepthMaterial extends MeshDepthMaterial {\n\n    constructor(parameters) {\n\n        parameters = parameters || {};\n        parameters.depthPacking = RGBADepthPacking;\n        super(parameters);\n\n    }\n\n}\n\nexport { MeshRGBADepthMaterial };","import { ShaderLib, ShaderMaterial, UniformsUtils } from 'three';\n\n/**\n     * @author Maxime Quiblier / http://github.com/maximeq\n     *\n     * @param {boolean} useFloatTexture If true, we consider floatTexture extension is activated and available.\n     *                                  The resulting coordinates will be stored in RGB components.\n     *                                  If false (default), the coordinate to store must be defined by parameters.coordinate\n     *                                  and will be packed in RGBA.\n     * @param {string} coordinate x, y or z to choose which coordinate will be packed in RGBA using THREE.JS packDepthToRGBA. Values will be mapped from -1:1 to 0:0.5 since\n     *                            depth packing does only provide methods to store in [0,1[ To recover the view coordinate, you need to do\n     *                            x = 4*unpackRGBAToDepth(rgba) - 1;\n     */\nclass MeshViewPositionMaterial extends ShaderMaterial {\n\n    constructor(parameters) {\n\n        parameters = parameters || {};\n\n        parameters.uniforms = UniformsUtils.merge([\n            ShaderLib.displacementmap\n        ]);\n        parameters.vertexShader = [\n\n            '#include <common>',\n            '#include <displacementmap_pars_vertex>',\n            '#include <fog_pars_vertex>',\n            '#include <morphtarget_pars_vertex>',\n            '#include <skinning_pars_vertex>',\n            '#include <shadowmap_pars_vertex>',\n            '#include <logdepthbuf_pars_vertex>',\n            '#include <clipping_planes_pars_vertex>',\n\n            'varying vec3 vViewPosition;',\n\n            'void main() {',\n\n            '#include <skinbase_vertex>',\n\n            '#include <begin_vertex>',\n            '#include <morphtarget_vertex>',\n            '#include <skinning_vertex>',\n            '#include <displacementmap_vertex>',\n            '#include <project_vertex>',\n            '#include <logdepthbuf_vertex>',\n            '#include <clipping_planes_vertex>',\n\n            'vViewPosition = (viewMatrix * modelMatrix * vec4( transformed, 1.0)).xyz;',\n\n            '}'\n        ].join('\\n');\n\n        parameters.fragmentShader = [\n            'varying vec3 vViewPosition;',\n            'void main() {',\n            'gl_FragColor = vec4(vViewPosition.xyz,1.0);',\n            '}',\n        ].join('\\n');\n\n        super(parameters);\n\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n\n        this.fog = false;\n        this.lights = false;\n\n        this.skinning = false;\n        this.morphTargets = false;\n\n    }\n}\n\nexport { MeshViewPositionMaterial }\n","import {\n    Matrix4,\n    ShaderLib,\n    ShaderMaterial,\n    TangentSpaceNormalMap,\n    UniformsUtils,\n    Vector2\n} from 'three';\n\n\n/**\n     * @author Maxime Quiblier / http://github.com/maximeq\n     *\n     * This material will save world space normals in pixels, the way MeshNormalMaterial does for view space normals.\n     * Use same parameters as for MeshNormalMaterial.\n     *\n     * You need to update the uniform viewMatrixInverse for this material to work properly.\n     * If you don't want to do it by yourself, just call MeshWorldNormalMaterial.updateMeshOnBeforeRender on any mesh using this material.\n     * see MeshWorldNormalMaterial.updateMeshOnBeforeRender for more details.\n     */\nclass MeshWorldNormalMaterial extends ShaderMaterial {\n\n    constructor(parameters) {\n\n        parameters = parameters || {};\n\n        parameters.uniforms = UniformsUtils.merge([\n            ShaderLib.normal.uniforms,\n            { viewMatrixInverse: { value: new Matrix4() } }\n        ]);\n        parameters.vertexShader = ShaderLib.normal.vertexShader;\n        parameters.fragmentShader =\n            'uniform mat4 viewMatrixInverse;' + '\\n' +\n            ShaderLib.normal.fragmentShader.replace(\n                'gl_FragColor = ',\n\n                'normal = normalize(mat3(viewMatrixInverse) * normal);' + '\\n' +\n                'gl_FragColor = '\n            );\n\n        super(parameters);\n\n        this.bumpMap = null;\n        this.bumpScale = 1;\n\n        this.normalMap = null;\n        this.normalMapType = TangentSpaceNormalMap;\n        this.normalScale = new Vector2(1, 1);\n\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n\n        this.fog = false;\n        this.lights = false;\n\n        this.skinning = false;\n        this.morphTargets = false;\n        this.morphNormals = false;\n\n        this.isMeshNormalMaterial = true;\n        this.isMeshWorldNormalMaterial = true;\n\n    }\n\n    /**\n     *  Helper to update the mesh onBeforeRender function to update the vewMatrixInverse uniform.\n     *  Call it only once on each mesh or it may impact performances.\n     *  Note that previously set onBeforeRender will be preserved.\n     */\n    updateMeshOnBeforeRender = function (mesh) {\n\n        const oldOnBeforeRender = mesh.onBeforeRender;\n        mesh.onBeforeRender = function (renderer, scene, camera, geometry, material, group) {\n\n            oldOnBeforeRender.call(this, renderer, scene, camera, geometry, material, group);\n\n            if (this.material.isMeshWorldNormalMaterial)\n                this.material.uniforms.viewMatrixInverse.value.copy(camera.matrixWorld);\n\n        };\n    }\n}\n\nexport { MeshWorldNormalMaterial };\n\n","import { ShaderLib, ShaderMaterial, UniformsUtils } from 'three';\n\n/**\n * @author Maxime Quiblier / http://github.com/maximeq\n *\n */\nclass MeshWorldPositionMaterial extends ShaderMaterial {\n\n    constructor(parameters) {\n\n        parameters = parameters || {};\n\n        parameters.uniforms = UniformsUtils.merge([\n            ShaderLib.depth.uniforms\n        ]);\n        parameters.vertexShader = [\n\n            '#include <common>',\n            '#include <displacementmap_pars_vertex>',\n            '#include <fog_pars_vertex>',\n            '#include <morphtarget_pars_vertex>',\n            '#include <skinning_pars_vertex>',\n            '#include <shadowmap_pars_vertex>',\n            '#include <logdepthbuf_pars_vertex>',\n            '#include <clipping_planes_pars_vertex>',\n\n            'varying vec4 vWorldPosition;',\n\n            'void main() {',\n\n            '#include <skinbase_vertex>',\n\n            '#include <begin_vertex>',\n            '#include <morphtarget_vertex>',\n            '#include <skinning_vertex>',\n            '#include <displacementmap_vertex>',\n            '#include <project_vertex>',\n            '#include <logdepthbuf_vertex>',\n            '#include <clipping_planes_vertex>',\n\n            'vWorldPosition = modelMatrix * vec4( transformed, 1.0 );',\n\n            '}'\n        ].join('\\n');\n\n        parameters.fragmentShader = [\n            'varying vec4 vWorldPosition;',\n            'void main() {',\n            'gl_FragColor = vWorldPosition;',\n            '}',\n        ].join('\\n');\n\n        super(parameters);\n\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n\n        this.fog = false;\n        this.lights = false;\n\n        this.skinning = false;\n        this.morphTargets = false;\n\n        this.isMeshDepthMaterial = true;\n        this.isMeshWorldPositionMaterial = true;\n\n    }\n\n}\n\nexport { MeshWorldPositionMaterial }\n"],"names":["ShaderMaterial","UniformsUtils","ShaderLib","TangentSpaceNormalMap","Vector2","MeshDepthMaterial","RGBADepthPacking","Matrix4"],"mappings":";;;IASA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,uBAAuB,SAASA,oBAAc,CAAC;AACrD;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;AAC5B;IACA,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACtC;IACA,QAAQ,UAAU,CAAC,QAAQ,GAAGC,mBAAa,CAAC,KAAK,CAAC;IAClD,YAAYC,eAAS,CAAC,MAAM,CAAC,QAAQ;IACrC,YAAY,EAAE,eAAe,EAAE,EAAE,KAAK,EAAE,UAAU,CAAC,eAAe,IAAI,IAAI,EAAE,EAAE;IAC9E,SAAS,CAAC,CAAC;IACX,QAAQ,UAAU,CAAC,YAAY,GAAG,iCAAiC,GAAG,IAAI;IAC1E,cAAcA,eAAS,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO;IACnD,gBAAgB,sBAAsB;IACtC,gBAAgB,uCAAuC,GAAG,IAAI;IAC9D,kBAAkB,sBAAsB;IACxC,aAAa,CAAC;IACd,QAAQ,UAAU,CAAC,cAAc;IACjC,YAAY,iCAAiC,GAAG,IAAI;IACpD,YAAY,+BAA+B,GAAG,IAAI;IAClD,YAAYA,eAAS,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO;IACnD,gBAAgB,4DAA4D;IAC5E,gBAAgB,sCAAsC,GAAG,IAAI;IAC7D,kBAAkB,sCAAsC,GAAG,IAAI;IAC/D,kBAAkB,8EAA8E,GAAG,IAAI;IACvG,kBAAkB,4CAA4C,GAAG,IAAI;IACrE,kBAAkB,qCAAqC,GAAG,IAAI;IAC9D,kBAAkB,sCAAsC,GAAG,IAAI;IAC/D,kBAAkB,sFAAsF,GAAG,IAAI;IAC/G,kBAAkB,yDAAyD,GAAG,IAAI;IAClF,kBAAkB,4DAA4D;IAC9E,aAAa,CAAC;AACd;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,QAAQ,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AAC3B;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,CAAC,aAAa,GAAGC,2BAAqB,CAAC;IACnD,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAIC,aAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAClC,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACzC,QAAQ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;AAC9C;IACA,KAAK;IACL;;IC1EA;IACA;IACA;IACA;IACA;IACA,MAAM,qBAAqB,SAASC,uBAAiB,CAAC;AACtD;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;AAC5B;IACA,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;IACtC,QAAQ,UAAU,CAAC,YAAY,GAAGC,sBAAgB,CAAC;IACnD,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B;IACA,KAAK;AACL;IACA;;ICfA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,wBAAwB,SAASN,oBAAc,CAAC;AACtD;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;AAC5B;IACA,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACtC;IACA,QAAQ,UAAU,CAAC,QAAQ,GAAGC,mBAAa,CAAC,KAAK,CAAC;IAClD,YAAYC,eAAS,CAAC,eAAe;IACrC,SAAS,CAAC,CAAC;IACX,QAAQ,UAAU,CAAC,YAAY,GAAG;AAClC;IACA,YAAY,mBAAmB;IAC/B,YAAY,wCAAwC;IACpD,YAAY,4BAA4B;IACxC,YAAY,oCAAoC;IAChD,YAAY,iCAAiC;IAC7C,YAAY,kCAAkC;IAC9C,YAAY,oCAAoC;IAChD,YAAY,wCAAwC;AACpD;IACA,YAAY,6BAA6B;AACzC;IACA,YAAY,eAAe;AAC3B;IACA,YAAY,4BAA4B;AACxC;IACA,YAAY,yBAAyB;IACrC,YAAY,+BAA+B;IAC3C,YAAY,4BAA4B;IACxC,YAAY,mCAAmC;IAC/C,YAAY,2BAA2B;IACvC,YAAY,+BAA+B;IAC3C,YAAY,mCAAmC;AAC/C;IACA,YAAY,2EAA2E;AACvF;IACA,YAAY,GAAG;IACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB;IACA,QAAQ,UAAU,CAAC,cAAc,GAAG;IACpC,YAAY,6BAA6B;IACzC,YAAY,eAAe;IAC3B,YAAY,6CAA6C;IACzD,YAAY,GAAG;IACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC;IACA,KAAK;IACL;;ICjEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,uBAAuB,SAASF,oBAAc,CAAC;AACrD;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;AAC5B;IACA,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACtC;IACA,QAAQ,UAAU,CAAC,QAAQ,GAAGC,mBAAa,CAAC,KAAK,CAAC;IAClD,YAAYC,eAAS,CAAC,MAAM,CAAC,QAAQ;IACrC,YAAY,EAAE,iBAAiB,EAAE,EAAE,KAAK,EAAE,IAAIK,aAAO,EAAE,EAAE,EAAE;IAC3D,SAAS,CAAC,CAAC;IACX,QAAQ,UAAU,CAAC,YAAY,GAAGL,eAAS,CAAC,MAAM,CAAC,YAAY,CAAC;IAChE,QAAQ,UAAU,CAAC,cAAc;IACjC,YAAY,iCAAiC,GAAG,IAAI;IACpD,YAAYA,eAAS,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO;IACnD,gBAAgB,iBAAiB;AACjC;IACA,gBAAgB,uDAAuD,GAAG,IAAI;IAC9E,gBAAgB,iBAAiB;IACjC,aAAa,CAAC;AACd;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,QAAQ,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AAC3B;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,CAAC,aAAa,GAAGC,2BAAqB,CAAC;IACnD,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAIC,aAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAClC,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACzC,QAAQ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;AAC9C;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,wBAAwB,GAAG,UAAU,IAAI,EAAE;AAC/C;IACA,QAAQ,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC;IACtD,QAAQ,IAAI,CAAC,cAAc,GAAG,UAAU,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC5F;IACA,YAAY,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC7F;IACA,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,yBAAyB;IACvD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AACxF;IACA,SAAS,CAAC;IACV,KAAK;IACL;;ICnFA;IACA;IACA;IACA;IACA,MAAM,yBAAyB,SAASJ,oBAAc,CAAC;AACvD;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;AAC5B;IACA,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACtC;IACA,QAAQ,UAAU,CAAC,QAAQ,GAAGC,mBAAa,CAAC,KAAK,CAAC;IAClD,YAAYC,eAAS,CAAC,KAAK,CAAC,QAAQ;IACpC,SAAS,CAAC,CAAC;IACX,QAAQ,UAAU,CAAC,YAAY,GAAG;AAClC;IACA,YAAY,mBAAmB;IAC/B,YAAY,wCAAwC;IACpD,YAAY,4BAA4B;IACxC,YAAY,oCAAoC;IAChD,YAAY,iCAAiC;IAC7C,YAAY,kCAAkC;IAC9C,YAAY,oCAAoC;IAChD,YAAY,wCAAwC;AACpD;IACA,YAAY,8BAA8B;AAC1C;IACA,YAAY,eAAe;AAC3B;IACA,YAAY,4BAA4B;AACxC;IACA,YAAY,yBAAyB;IACrC,YAAY,+BAA+B;IAC3C,YAAY,4BAA4B;IACxC,YAAY,mCAAmC;IAC/C,YAAY,2BAA2B;IACvC,YAAY,+BAA+B;IAC3C,YAAY,mCAAmC;AAC/C;IACA,YAAY,0DAA0D;AACtE;IACA,YAAY,GAAG;IACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB;IACA,QAAQ,UAAU,CAAC,cAAc,GAAG;IACpC,YAAY,8BAA8B;IAC1C,YAAY,eAAe;IAC3B,YAAY,gCAAgC;IAC5C,YAAY,GAAG;IACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACxC,QAAQ,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;AAChD;IACA,KAAK;AACL;IACA;;;;;;;;;;;;;;"}