{"version":3,"file":"dioxygen-three-examples.js","sources":["../src/materials/MeshNormalDepthMaterial.js","../src/materials/MeshRGBADepthMaterial.js","../src/materials/MeshViewPositionMaterial.js","../src/materials/MeshWorldNormalMaterial.js","../src/materials/MeshWorldPositionMaterial.js","../../../node_modules/three/examples/jsm/utils/BufferGeometryUtils.js","../src/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import {\r\n    ShaderLib,\r\n    ShaderMaterial,\r\n    TangentSpaceNormalMap,\r\n    UniformsUtils,\r\n    Vector2\r\n} from 'three';\r\n\r\n\r\n/**\r\n     * @author Maxime Quiblier / http://github.com/maximeq\r\n     *\r\n     * This material will save view space normals in pixels inside rbg channels as well as Depth inside the alpha channel \r\n     * Use same parameters as for MeshNormalMaterial.\r\n     * \r\n     *\r\n     */\r\nclass MeshNormalDepthMaterial extends ShaderMaterial {\r\n\r\n    constructor(parameters) {\r\n\r\n        parameters = parameters || {};\r\n\r\n        parameters.uniforms = UniformsUtils.merge([\r\n            ShaderLib.normal.uniforms,\r\n            { linearize_depth: { value: parameters.linearize_depth ?? true } }\r\n        ]);\r\n        parameters.vertexShader = 'varying mat4 vProjectionMatrix;' + '\\n'\r\n            + ShaderLib.normal.vertexShader.replace(\r\n                '#include <uv_vertex>',\r\n                'vProjectionMatrix = projectionMatrix;' + '\\n'\r\n                + '#include <uv_vertex>'\r\n            );\r\n        parameters.fragmentShader =\r\n            'varying mat4 vProjectionMatrix;' + '\\n' +\r\n            'uniform bool linearize_depth;' + '\\n' +\r\n            ShaderLib.normal.fragmentShader.replace(\r\n                'gl_FragColor = vec4( packNormalToRGB( normal ), opacity );',\r\n                'float zN = 2.0*gl_FragCoord.z - 1.0;' + '\\n'\r\n                + 'float p23 = vProjectionMatrix[3][2];' + '\\n'\r\n                + 'float k = (vProjectionMatrix[2][2] - 1.0f)/(vProjectionMatrix[2][2] + 1.0f);' + '\\n'\r\n                + 'float inK = vProjectionMatrix[2][2] / p23;' + '\\n'\r\n                + 'float zFar =  p23/(1.0f + p23*inK);' + '\\n'\r\n                + 'float zNear =  1.0f/(inK - 1.0/p23);' + '\\n'\r\n                + 'float linearizedDepth =  2.0 * zNear * zFar / (zFar  + zNear - zN * (zFar - zNear));' + '\\n'\r\n                + 'float depth_e = linearize_depth ? linearizedDepth : zN;' + '\\n'\r\n                + 'gl_FragColor = vec4( packNormalToRGB( normal ), depth_e );'\r\n            );\r\n\r\n        super(parameters);\r\n\r\n        this.bumpMap = null;\r\n        this.bumpScale = 1;\r\n\r\n        this.normalMap = null;\r\n        this.normalMapType = TangentSpaceNormalMap;\r\n        this.normalScale = new Vector2(1, 1);\r\n\r\n        this.displacementMap = null;\r\n        this.displacementScale = 1;\r\n        this.displacementBias = 0;\r\n\r\n        this.wireframe = false;\r\n        this.wireframeLinewidth = 1;\r\n\r\n        this.fog = false;\r\n        this.lights = false;\r\n\r\n        this.skinning = false;\r\n        this.morphTargets = false;\r\n        this.morphNormals = false;\r\n\r\n        this.isMeshNormalMaterial = true;\r\n        this.isMeshNormalDepthMaterial = true;\r\n\r\n    }\r\n}\r\n\r\nexport { MeshNormalDepthMaterial };\r\n\r\n","import { MeshDepthMaterial, RGBADepthPacking } from 'three'\r\n\r\n/**\r\n * @author Maxime Quiblier / http://github.com/maximeq\r\n * Material packing depth as rgba values.\r\n * It is basically just MeshDepthMaterial with depthPacking at THREE.RGBADepthPacking\r\n */\r\nclass MeshRGBADepthMaterial extends MeshDepthMaterial {\r\n\r\n    constructor(parameters) {\r\n\r\n        parameters = parameters || {};\r\n        parameters.depthPacking = RGBADepthPacking;\r\n        super(parameters);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { MeshRGBADepthMaterial };","import { ShaderLib, ShaderMaterial, UniformsUtils } from 'three';\r\n\r\n/**\r\n     * @author Maxime Quiblier / http://github.com/maximeq\r\n     *\r\n     * @param {boolean} useFloatTexture If true, we consider floatTexture extension is activated and available.\r\n     *                                  The resulting coordinates will be stored in RGB components.\r\n     *                                  If false (default), the coordinate to store must be defined by parameters.coordinate\r\n     *                                  and will be packed in RGBA.\r\n     * @param {string} coordinate x, y or z to choose which coordinate will be packed in RGBA using THREE.JS packDepthToRGBA. Values will be mapped from -1:1 to 0:0.5 since\r\n     *                            depth packing does only provide methods to store in [0,1[ To recover the view coordinate, you need to do\r\n     *                            x = 4*unpackRGBAToDepth(rgba) - 1;\r\n     */\r\nclass MeshViewPositionMaterial extends ShaderMaterial {\r\n\r\n    constructor(parameters) {\r\n\r\n        parameters = parameters || {};\r\n\r\n        parameters.uniforms = UniformsUtils.merge([\r\n            ShaderLib.displacementmap\r\n        ]);\r\n        parameters.vertexShader = [\r\n\r\n            '#include <common>',\r\n            '#include <displacementmap_pars_vertex>',\r\n            '#include <fog_pars_vertex>',\r\n            '#include <morphtarget_pars_vertex>',\r\n            '#include <skinning_pars_vertex>',\r\n            '#include <shadowmap_pars_vertex>',\r\n            '#include <logdepthbuf_pars_vertex>',\r\n            '#include <clipping_planes_pars_vertex>',\r\n\r\n            'varying vec3 vViewPosition;',\r\n\r\n            'void main() {',\r\n\r\n            '#include <skinbase_vertex>',\r\n\r\n            '#include <begin_vertex>',\r\n            '#include <morphtarget_vertex>',\r\n            '#include <skinning_vertex>',\r\n            '#include <displacementmap_vertex>',\r\n            '#include <project_vertex>',\r\n            '#include <logdepthbuf_vertex>',\r\n            '#include <clipping_planes_vertex>',\r\n\r\n            'vViewPosition = (viewMatrix * modelMatrix * vec4( transformed, 1.0)).xyz;',\r\n\r\n            '}'\r\n        ].join('\\n');\r\n\r\n        parameters.fragmentShader = [\r\n            'varying vec3 vViewPosition;',\r\n            'void main() {',\r\n            'gl_FragColor = vec4(vViewPosition.xyz,1.0);',\r\n            '}',\r\n        ].join('\\n');\r\n\r\n        super(parameters);\r\n\r\n        this.displacementMap = null;\r\n        this.displacementScale = 1;\r\n        this.displacementBias = 0;\r\n\r\n        this.wireframe = false;\r\n        this.wireframeLinewidth = 1;\r\n\r\n        this.fog = false;\r\n        this.lights = false;\r\n\r\n        this.skinning = false;\r\n        this.morphTargets = false;\r\n\r\n    }\r\n}\r\n\r\nexport { MeshViewPositionMaterial }\r\n","import {\r\n    Matrix4,\r\n    ShaderLib,\r\n    ShaderMaterial,\r\n    TangentSpaceNormalMap,\r\n    UniformsUtils,\r\n    Vector2\r\n} from 'three';\r\n\r\n\r\n/**\r\n     * @author Maxime Quiblier / http://github.com/maximeq\r\n     *\r\n     * This material will save world space normals in pixels, the way MeshNormalMaterial does for view space normals.\r\n     * Use same parameters as for MeshNormalMaterial.\r\n     *\r\n     * You need to update the uniform viewMatrixInverse for this material to work properly.\r\n     * If you don't want to do it by yourself, just call MeshWorldNormalMaterial.updateMeshOnBeforeRender on any mesh using this material.\r\n     * see MeshWorldNormalMaterial.updateMeshOnBeforeRender for more details.\r\n     */\r\nclass MeshWorldNormalMaterial extends ShaderMaterial {\r\n\r\n    constructor(parameters) {\r\n\r\n        parameters = parameters || {};\r\n\r\n        parameters.uniforms = UniformsUtils.merge([\r\n            ShaderLib.normal.uniforms,\r\n            { viewMatrixInverse: { value: new Matrix4() } }\r\n        ]);\r\n        parameters.vertexShader = ShaderLib.normal.vertexShader;\r\n        parameters.fragmentShader =\r\n            'uniform mat4 viewMatrixInverse;' + '\\n' +\r\n            ShaderLib.normal.fragmentShader.replace(\r\n                'gl_FragColor = ',\r\n\r\n                'normal = normalize(mat3(viewMatrixInverse) * normal);' + '\\n' +\r\n                'gl_FragColor = '\r\n            );\r\n\r\n        super(parameters);\r\n\r\n        this.bumpMap = null;\r\n        this.bumpScale = 1;\r\n\r\n        this.normalMap = null;\r\n        this.normalMapType = TangentSpaceNormalMap;\r\n        this.normalScale = new Vector2(1, 1);\r\n\r\n        this.displacementMap = null;\r\n        this.displacementScale = 1;\r\n        this.displacementBias = 0;\r\n\r\n        this.wireframe = false;\r\n        this.wireframeLinewidth = 1;\r\n\r\n        this.fog = false;\r\n        this.lights = false;\r\n\r\n        this.skinning = false;\r\n        this.morphTargets = false;\r\n        this.morphNormals = false;\r\n\r\n        this.isMeshNormalMaterial = true;\r\n        this.isMeshWorldNormalMaterial = true;\r\n\r\n    }\r\n\r\n    /**\r\n     *  Helper to update the mesh onBeforeRender function to update the vewMatrixInverse uniform.\r\n     *  Call it only once on each mesh or it may impact performances.\r\n     *  Note that previously set onBeforeRender will be preserved.\r\n     */\r\n    updateMeshOnBeforeRender = function (mesh) {\r\n\r\n        const oldOnBeforeRender = mesh.onBeforeRender;\r\n        mesh.onBeforeRender = function (renderer, scene, camera, geometry, material, group) {\r\n\r\n            oldOnBeforeRender.call(this, renderer, scene, camera, geometry, material, group);\r\n\r\n            if (this.material.isMeshWorldNormalMaterial)\r\n                this.material.uniforms.viewMatrixInverse.value.copy(camera.matrixWorld);\r\n\r\n        };\r\n    }\r\n}\r\n\r\nexport { MeshWorldNormalMaterial };\r\n\r\n","import { ShaderLib, ShaderMaterial, UniformsUtils } from 'three';\r\n\r\n/**\r\n * @author Maxime Quiblier / http://github.com/maximeq\r\n *\r\n */\r\nclass MeshWorldPositionMaterial extends ShaderMaterial {\r\n\r\n    constructor(parameters) {\r\n\r\n        parameters = parameters || {};\r\n\r\n        parameters.uniforms = UniformsUtils.merge([\r\n            ShaderLib.depth.uniforms\r\n        ]);\r\n        parameters.vertexShader = [\r\n\r\n            '#include <common>',\r\n            '#include <displacementmap_pars_vertex>',\r\n            '#include <fog_pars_vertex>',\r\n            '#include <morphtarget_pars_vertex>',\r\n            '#include <skinning_pars_vertex>',\r\n            '#include <shadowmap_pars_vertex>',\r\n            '#include <logdepthbuf_pars_vertex>',\r\n            '#include <clipping_planes_pars_vertex>',\r\n\r\n            'varying vec4 vWorldPosition;',\r\n\r\n            'void main() {',\r\n\r\n            '#include <skinbase_vertex>',\r\n\r\n            '#include <begin_vertex>',\r\n            '#include <morphtarget_vertex>',\r\n            '#include <skinning_vertex>',\r\n            '#include <displacementmap_vertex>',\r\n            '#include <project_vertex>',\r\n            '#include <logdepthbuf_vertex>',\r\n            '#include <clipping_planes_vertex>',\r\n\r\n            'vWorldPosition = modelMatrix * vec4( transformed, 1.0 );',\r\n\r\n            '}'\r\n        ].join('\\n');\r\n\r\n        parameters.fragmentShader = [\r\n            'varying vec4 vWorldPosition;',\r\n            'void main() {',\r\n            'gl_FragColor = vWorldPosition;',\r\n            '}',\r\n        ].join('\\n');\r\n\r\n        super(parameters);\r\n\r\n        this.displacementMap = null;\r\n        this.displacementScale = 1;\r\n        this.displacementBias = 0;\r\n\r\n        this.wireframe = false;\r\n        this.wireframeLinewidth = 1;\r\n\r\n        this.fog = false;\r\n        this.lights = false;\r\n\r\n        this.skinning = false;\r\n        this.morphTargets = false;\r\n\r\n        this.isMeshDepthMaterial = true;\r\n        this.isMeshWorldPositionMaterial = true;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { MeshWorldPositionMaterial }\r\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3\n} from 'three';\n\nclass BufferGeometryUtils {\n\n\tstatic computeTangents( geometry ) {\n\n\t\tgeometry.computeTangents();\n\t\tconsole.warn( 'THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.' );\n\n\t}\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tstatic mergeBufferGeometries( geometries, useGroups = false ) {\n\n\t\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\t\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tconst attributes = {};\n\t\tconst morphAttributes = {};\n\n\t\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tconst mergedGeometry = new BufferGeometry();\n\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst geometry = geometries[ i ];\n\t\t\tlet attributesCount = 0;\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t\tattributesCount ++;\n\n\t\t\t}\n\n\t\t\t// ensure geometries have the same number of attributes\n\n\t\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tlet count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tlet indexOffset = 0;\n\t\t\tconst mergedIndex = [];\n\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tconst index = geometries[ i ].index;\n\n\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tconst mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t}\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tstatic mergeBufferAttributes( attributes ) {\n\n\t\tlet TypedArray;\n\t\tlet itemSize;\n\t\tlet normalized;\n\t\tlet arrayLength = 0;\n\n\t\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tconst array = new TypedArray( arrayLength );\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tstatic interleaveAttributes( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tlet TypedArray;\n\t\tlet arrayLength = 0;\n\t\tlet stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tlet offset = 0;\n\t\tconst res = [];\n\t\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tconst attribute = attributes[ j ];\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst count = attribute.count;\n\t\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t}\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\tstatic estimateBytesUsed( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tlet mem = 0;\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tconst attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tconst indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t}\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tstatic mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tconst hashToIndex = {};\n\t\tconst indices = geometry.getIndex();\n\t\tconst positions = geometry.getAttribute( 'position' );\n\t\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tlet nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tconst attributeNames = Object.keys( geometry.attributes );\n\t\tconst attrArrays = {};\n\t\tconst morphAttrsArrays = {};\n\t\tconst newIndices = [];\n\t\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tconst name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tconst decimalShift = Math.log10( 1 / tolerance );\n\t\tconst shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tlet hash = '';\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\t\tconst newarray = attrArrays[ name ];\n\t\t\t\t\tconst newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tconst name = attributeNames[ i ];\n\t\t\tconst oldAttribute = geometry.getAttribute( name );\n\n\t\t\tconst buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tconst attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( let j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tconst oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tconst buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tconst morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\tstatic toTrianglesDrawMode( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tlet index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tconst indices = [];\n\n\t\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst numberOfTriangles = index.count - 2;\n\t\t\tconst newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tconst newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n\t * Helpful for Raytracing or Decals.\n\t * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n\t * @return {Object} An Object with original position/normal attributes and morphed ones.\n\t */\n\tstatic computeMorphedAttributes( object ) {\n\n\t\tif ( object.geometry.isBufferGeometry !== true ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst _vA = new Vector3();\n\t\tconst _vB = new Vector3();\n\t\tconst _vC = new Vector3();\n\n\t\tconst _tempA = new Vector3();\n\t\tconst _tempB = new Vector3();\n\t\tconst _tempC = new Vector3();\n\n\t\tconst _morphA = new Vector3();\n\t\tconst _morphB = new Vector3();\n\t\tconst _morphC = new Vector3();\n\n\t\tfunction _calculateMorphedAttributeData(\n\t\t\tobject,\n\t\t\tmaterial,\n\t\t\tattribute,\n\t\t\tmorphAttribute,\n\t\t\tmorphTargetsRelative,\n\t\t\ta,\n\t\t\tb,\n\t\t\tc,\n\t\t\tmodifiedAttributeArray\n\t\t) {\n\n\t\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\t\tif ( material.morphTargets && morphAttribute && morphInfluences ) {\n\n\t\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_vA.add( _morphA );\n\t\t\t\t_vB.add( _morphB );\n\t\t\t\t_vC.add( _morphC );\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tobject.boneTransform( a, _vA );\n\t\t\t\tobject.boneTransform( b, _vB );\n\t\t\t\tobject.boneTransform( c, _vC );\n\n\t\t\t}\n\n\t\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t\t}\n\n\t\tconst geometry = object.geometry;\n\t\tconst material = object.material;\n\n\t\tlet a, b, c;\n\t\tconst index = geometry.index;\n\t\tconst positionAttribute = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\tconst normalAttribute = geometry.attributes.normal;\n\t\tconst morphNormal = geometry.morphAttributes.position;\n\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\t\tlet i, j, il, jl;\n\t\tlet group, groupMaterial;\n\t\tlet start, end;\n\n\t\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\t\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\t\tobject,\n\t\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\t\tobject,\n\t\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tmaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tmaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( positionAttribute !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\ta = j;\n\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\t\tobject,\n\t\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\t\tobject,\n\t\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\ta = i;\n\t\t\t\t\tb = i + 1;\n\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tmaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tmaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\t\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\t\treturn {\n\n\t\t\tpositionAttribute: positionAttribute,\n\t\t\tnormalAttribute: normalAttribute,\n\t\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t\t};\n\n\t}\n\n}\n\nexport { BufferGeometryUtils };\n","import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tVector3\r\n} from 'three';\r\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils'\r\n\r\nconst _A = new Vector3();\r\nconst _B = new Vector3();\r\nconst _C = new Vector3();\r\n\r\nclass EdgeSplitModifier {\r\n\r\n\tmodify( geometry, cutOffAngle, tryKeepNormals = true ) {\r\n\r\n\t\tfunction computeNormals() {\r\n\r\n\t\t\tnormals = new Float32Array( indexes.length * 3 );\r\n\r\n\t\t\tfor ( let i = 0; i < indexes.length; i += 3 ) {\r\n\r\n\t\t\t\tlet index = indexes[ i ];\r\n\r\n\t\t\t\t_A.set(\r\n\t\t\t\t\tpositions[ 3 * index ],\r\n\t\t\t\t\tpositions[ 3 * index + 1 ],\r\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\r\n\r\n\t\t\t\tindex = indexes[ i + 1 ];\r\n\t\t\t\t_B.set(\r\n\t\t\t\t\tpositions[ 3 * index ],\r\n\t\t\t\t\tpositions[ 3 * index + 1 ],\r\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\r\n\r\n\t\t\t\tindex = indexes[ i + 2 ];\r\n\t\t\t\t_C.set(\r\n\t\t\t\t\tpositions[ 3 * index ],\r\n\t\t\t\t\tpositions[ 3 * index + 1 ],\r\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\r\n\r\n\t\t\t\t_C.sub( _B );\r\n\t\t\t\t_A.sub( _B );\r\n\r\n\t\t\t\tconst normal = _C.cross( _A ).normalize();\r\n\r\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tnormals[ 3 * ( i + j ) ] = normal.x;\r\n\t\t\t\t\tnormals[ 3 * ( i + j ) + 1 ] = normal.y;\r\n\t\t\t\t\tnormals[ 3 * ( i + j ) + 2 ] = normal.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction mapPositionsToIndexes() {\r\n\r\n\t\t\tpointToIndexMap = Array( positions.length / 3 );\r\n\r\n\t\t\tfor ( let i = 0; i < indexes.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = indexes[ i ];\r\n\r\n\t\t\t\tif ( pointToIndexMap[ index ] == null ) {\r\n\r\n\t\t\t\t\tpointToIndexMap[ index ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpointToIndexMap[ index ].push( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction edgeSplitToGroups( indexes, cutOff, firstIndex ) {\r\n\r\n\t\t\t_A.set( normals[ 3 * firstIndex ], normals[ 3 * firstIndex + 1 ], normals[ 3 * firstIndex + 2 ] ).normalize();\r\n\r\n\t\t\tconst result = {\r\n\t\t\t\tsplitGroup: [],\r\n\t\t\t\tcurrentGroup: [ firstIndex ]\r\n\t\t\t};\r\n\r\n\t\t\tfor ( const j of indexes ) {\r\n\r\n\t\t\t\tif ( j !== firstIndex ) {\r\n\r\n\t\t\t\t\t_B.set( normals[ 3 * j ], normals[ 3 * j + 1 ], normals[ 3 * j + 2 ] ).normalize();\r\n\r\n\t\t\t\t\tif ( _B.dot( _A ) < cutOff ) {\r\n\r\n\t\t\t\t\t\tresult.splitGroup.push( j );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tresult.currentGroup.push( j );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction edgeSplit( indexes, cutOff, original = null ) {\r\n\r\n\t\t\tif ( indexes.length === 0 ) return;\r\n\r\n\t\t\tconst groupResults = [];\r\n\r\n\t\t\tfor ( const index of indexes ) {\r\n\r\n\t\t\t\tgroupResults.push( edgeSplitToGroups( indexes, cutOff, index ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet result = groupResults[ 0 ];\r\n\r\n\t\t\tfor ( const groupResult of groupResults ) {\r\n\r\n\t\t\t\tif ( groupResult.currentGroup.length > result.currentGroup.length ) {\r\n\r\n\t\t\t\t\tresult = groupResult;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( original != null ) {\r\n\r\n\t\t\t\tsplitIndexes.push( {\r\n\t\t\t\t\toriginal: original,\r\n\t\t\t\t\tindexes: result.currentGroup\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( result.splitGroup.length ) {\r\n\r\n\t\t\t\tedgeSplit( result.splitGroup, cutOff, original || result.currentGroup[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.isGeometry === true ) {\r\n\r\n\t\t\tconsole.error( 'THREE.EdgeSplitModifier no longer supports THREE.Geometry. Use BufferGeometry instead.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tlet hadNormals = false;\r\n\t\tlet oldNormals = null;\r\n\r\n\t\tif ( geometry.attributes.normal ) {\r\n\r\n\t\t\thadNormals = true;\r\n\r\n\t\t\tgeometry = geometry.clone();\r\n\r\n\t\t\tif ( tryKeepNormals === true && geometry.index !== null ) {\r\n\r\n\t\t\t\toldNormals = geometry.attributes.normal.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.deleteAttribute( 'normal' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.index == null ) {\r\n\r\n\t\t\tif ( BufferGeometryUtils === undefined ) {\r\n\r\n\t\t\t\tthrow 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\r\n\r\n\t\t\t}\r\n\t\t\tgeometry = BufferGeometryUtils.mergeVertices( geometry );\r\n\t\t}\r\n\r\n\t\tconst indexes = geometry.index.array;\r\n\t\tconst positions = geometry.getAttribute( 'position' ).array;\r\n\r\n\t\tlet normals;\r\n\t\tlet pointToIndexMap;\r\n\r\n\t\tcomputeNormals();\r\n\t\tmapPositionsToIndexes();\r\n\r\n\t\tconst splitIndexes = [];\r\n\r\n\t\tfor ( const vertexIndexes of pointToIndexMap ) {\r\n\r\n\t\t\tedgeSplit( vertexIndexes, Math.cos( cutOffAngle ) - 0.001 );\r\n\r\n\t\t}\r\n\r\n\t\tconst old_nb_indices = positions.length / \r\n\t\t\tgeometry.getAttribute( 'position' ).itemSize;\r\n\t\tconst new_nb_indices = old_nb_indices + splitIndexes.length;\r\n\t\r\n\t\r\n\t\tconst newAttributes = {};\r\n\t\tfor ( const name of Object.keys( geometry.attributes ) ) {\r\n\r\n\t\t\tconst oldAttribute = geometry.attributes[ name ];\r\n\t\t\tconst newArray = new oldAttribute.array.constructor(new_nb_indices * oldAttribute.itemSize );\r\n\t\t\tnewArray.set( oldAttribute.array );\r\n\t\t\tnewAttributes[ name ] = new BufferAttribute( newArray, oldAttribute.itemSize, oldAttribute.normalized );\r\n\r\n\t\t}\r\n\r\n\t\tconst newIndexes = new Uint32Array( indexes.length );\r\n\t\tnewIndexes.set( indexes );\r\n\t\tfor ( let i = 0; i < splitIndexes.length; i ++ ) {\r\n\r\n\t\t\tconst split = splitIndexes[ i ];\r\n\t\t\tconst index = indexes[ split.original ];\r\n\r\n\t\t\tfor ( const attribute of Object.values( newAttributes ) ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j < attribute.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tattribute.array[ ( old_nb_indices  + i ) * attribute.itemSize + j ] =\r\n\t\t\t\t\t\tattribute.array[ index * attribute.itemSize + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( const j of split.indexes ) {\r\n\r\n\t\t\t\tnewIndexes[ j ] = old_nb_indices+ i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( newIndexes, 1 ) );\r\n\r\n\t\tfor ( const name of Object.keys( newAttributes ) ) {\r\n\r\n\t\t\tgeometry.setAttribute( name, newAttributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( hadNormals ) {\r\n\r\n\t\t\tgeometry.computeVertexNormals();\r\n\r\n\t\t\tif ( oldNormals !== null ) {\r\n\r\n\t\t\t\tconst changedNormals = new Array( oldNormals.length / 3 ).fill( false );\r\n\r\n\t\t\t\tfor ( const splitData of splitIndexes )\r\n\t\t\t\t\tchangedNormals[ splitData.original ] = true;\r\n\r\n\t\t\t\tfor ( let i = 0; i < changedNormals.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( changedNormals[ i ] === false ) {\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ )\r\n\t\t\t\t\t\t\tgeometry.attributes.normal.array[ 3 * i + j ] = oldNormals[ 3 * i + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nexport { EdgeSplitModifier };\r\n"],"names":["ShaderMaterial","UniformsUtils","ShaderLib","TangentSpaceNormalMap","Vector2","MeshDepthMaterial","RGBADepthPacking","Matrix4","BufferGeometry","BufferAttribute","InterleavedBuffer","InterleavedBufferAttribute","TrianglesDrawMode","TriangleFanDrawMode","TriangleStripDrawMode","Vector3","Float32BufferAttribute"],"mappings":"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","x_google_ignoreList":[5]}