var DioxygenThreeExamples=function(e,i){"use strict";class r extends i.ShaderMaterial{constructor(e){(e=e||{}).uniforms=i.UniformsUtils.merge([i.ShaderLib.normal.uniforms,{linearize_depth:{value:e.linearize_depth??!0}}]),e.vertexShader="varying mat4 vProjectionMatrix;\n"+i.ShaderLib.normal.vertexShader.replace("#include <uv_vertex>","vProjectionMatrix = projectionMatrix;\n#include <uv_vertex>"),e.fragmentShader="varying mat4 vProjectionMatrix;\nuniform bool linearize_depth;\n"+i.ShaderLib.normal.fragmentShader.replace("gl_FragColor = vec4( packNormalToRGB( normal ), opacity );","float zN = 2.0*gl_FragCoord.z - 1.0;\nfloat p23 = vProjectionMatrix[3][2];\nfloat k = (vProjectionMatrix[2][2] - 1.0f)/(vProjectionMatrix[2][2] + 1.0f);\nfloat inK = vProjectionMatrix[2][2] / p23;\nfloat zFar =  p23/(1.0f + p23*inK);\nfloat zNear =  1.0f/(inK - 1.0/p23);\nfloat linearizedDepth =  2.0 * zNear * zFar / (zFar  + zNear - zN * (zFar - zNear));\nfloat depth_e = linearize_depth ? linearizedDepth : zN;\ngl_FragColor = vec4( packNormalToRGB( normal ), depth_e );"),super(e),this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=i.TangentSpaceNormalMap,this.normalScale=new i.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.isMeshNormalMaterial=!0,this.isMeshNormalDepthMaterial=!0}}class a extends i.MeshDepthMaterial{constructor(e){(e=e||{}).depthPacking=i.RGBADepthPacking,super(e)}}class t extends i.ShaderMaterial{constructor(e){(e=e||{}).uniforms=i.UniformsUtils.merge([i.ShaderLib.displacementmap]),e.vertexShader=["#include <common>","#include <displacementmap_pars_vertex>","#include <fog_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","#include <clipping_planes_pars_vertex>","varying vec3 vViewPosition;","void main() {","#include <skinbase_vertex>","#include <begin_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <displacementmap_vertex>","#include <project_vertex>","#include <logdepthbuf_vertex>","#include <clipping_planes_vertex>","vViewPosition = (viewMatrix * modelMatrix * vec4( transformed, 1.0)).xyz;","}"].join("\n"),e.fragmentShader=["varying vec3 vViewPosition;","void main() {","gl_FragColor = vec4(vViewPosition.xyz,1.0);","}"].join("\n"),super(e),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1}}class n extends i.ShaderMaterial{constructor(e){(e=e||{}).uniforms=i.UniformsUtils.merge([i.ShaderLib.normal.uniforms,{viewMatrixInverse:{value:new i.Matrix4}}]),e.vertexShader=i.ShaderLib.normal.vertexShader,e.fragmentShader="uniform mat4 viewMatrixInverse;\n"+i.ShaderLib.normal.fragmentShader.replace("gl_FragColor = ","normal = normalize(mat3(viewMatrixInverse) * normal);\ngl_FragColor = "),super(e),this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=i.TangentSpaceNormalMap,this.normalScale=new i.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.isMeshNormalMaterial=!0,this.isMeshWorldNormalMaterial=!0}updateMeshOnBeforeRender=function(e){const i=e.onBeforeRender;e.onBeforeRender=function(e,r,a,t,n,s){i.call(this,e,r,a,t,n,s),this.material.isMeshWorldNormalMaterial&&this.material.uniforms.viewMatrixInverse.value.copy(a.matrixWorld)}}}class s extends i.ShaderMaterial{constructor(e){(e=e||{}).uniforms=i.UniformsUtils.merge([i.ShaderLib.depth.uniforms]),e.vertexShader=["#include <common>","#include <displacementmap_pars_vertex>","#include <fog_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","#include <clipping_planes_pars_vertex>","varying vec4 vWorldPosition;","void main() {","#include <skinbase_vertex>","#include <begin_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <displacementmap_vertex>","#include <project_vertex>","#include <logdepthbuf_vertex>","#include <clipping_planes_vertex>","vWorldPosition = modelMatrix * vec4( transformed, 1.0 );","}"].join("\n"),e.fragmentShader=["varying vec4 vWorldPosition;","void main() {","gl_FragColor = vWorldPosition;","}"].join("\n"),super(e),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.isMeshDepthMaterial=!0,this.isMeshWorldPositionMaterial=!0}}return e.MeshNormalDepthMaterial=r,e.MeshRGBADepthMaterial=a,e.MeshViewPositionMaterial=t,e.MeshWorldNormalMaterial=n,e.MeshWorldPositionMaterial=s,e}({},THREE);
